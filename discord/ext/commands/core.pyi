from typing import Any, Optional

class _CaseInsensitiveDict(dict):
    def __contains__(self, k: Any): ...
    def __delitem__(self, k: Any): ...
    def __getitem__(self, k: Any): ...
    def get(self, k: Any, default: Optional[Any] = ...): ...
    def __setitem__(self, k: Any, v: Any) -> None: ...

class Command:
    name: str = ...
    callback: Any = ...
    enabled: Any = ...
    help: Any = ...
    brief: Any = ...
    usage: Any = ...
    rest_is_raw: Any = ...
    aliases: Any = ...
    description: Any = ...
    hidden: Any = ...
    params: Any = ...
    checks: Any = ...
    module: Any = ...
    ignore_extra: Any = ...
    instance: Any = ...
    parent: Any = ...
    def __init__(self, name: str, callback: Any, **kwargs: Any) -> None: ...
    def dispatch_error(self, ctx: Any, error: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def do_conversion(self, ctx: Any, converter: Any, argument: Any): ...
    def transform(self, ctx: Any, param: Any): ...
    @property
    def clean_params(self): ...
    @property
    def full_parent_name(self): ...
    @property
    def root_parent(self): ...
    @property
    def qualified_name(self): ...
    def call_before_hooks(self, ctx: Any) -> None: ...
    def call_after_hooks(self, ctx: Any) -> None: ...
    def prepare(self, ctx: Any) -> None: ...
    def is_on_cooldown(self, ctx: Any): ...
    def reset_cooldown(self, ctx: Any) -> None: ...
    def invoke(self, ctx: Any) -> None: ...
    def reinvoke(self, ctx: Any, *, call_hooks: bool = ...) -> None: ...
    on_error: Any = ...
    def error(self, coro: Any): ...
    def before_invoke(self, coro: Any): ...
    def after_invoke(self, coro: Any): ...
    @property
    def cog_name(self): ...
    @property
    def short_doc(self): ...
    @property
    def signature(self): ...
    def can_run(self, ctx: Any): ...

class GroupMixin:
    all_commands: Any = ...
    case_insensitive: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def commands(self): ...
    def recursively_remove_all_commands(self) -> None: ...
    def add_command(self, command: Any) -> None: ...
    def remove_command(self, name: str): ...
    def walk_commands(self) -> None: ...
    def get_command(self, name: str): ...
    def command(self, *args: Any, **kwargs: Any): ...
    def group(self, *args: Any, **kwargs: Any): ...

class Group(GroupMixin, Command):
    invoke_without_command: Any = ...
    def __init__(self, **attrs: Any) -> None: ...
    def invoke(self, ctx: Any) -> None: ...
    def reinvoke(self, ctx: Any, *, call_hooks: bool = ...) -> None: ...

def command(name: Optional[Any] = ..., cls: Optional[Any] = ..., **attrs: Any): ...
def group(name: Optional[Any] = ..., **attrs: Any): ...
def check(predicate: Any): ...
def has_role(name: str): ...
def has_any_role(*names: Any): ...
def has_permissions(**perms: Any): ...
def bot_has_role(name: str): ...
def bot_has_any_role(*names: Any): ...
def bot_has_permissions(**perms: Any): ...
def guild_only(): ...
def is_owner(): ...
def is_nsfw(): ...
def cooldown(rate: Any, per: Any, type: Any = ...): ...
