# Stubs for discord.webhook (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class WebhookAdapter:
    BASE: str = ...
    def request(
        self,
        verb: Any,
        url: Any,
        payload: Optional[Any] = ...,
        multipart: Optional[Any] = ...,
    ) -> None: ...
    def delete_webhook(self): ...
    def edit_webhook(self, **payload: Any): ...
    def handle_execution_response(self, data: Any, wait: Any) -> None: ...
    def execute_webhook(
        self, payload: Any, *, wait: bool = ..., file: Optional[Any] = ...
    ): ...

class AsyncWebhookAdapter(WebhookAdapter):
    session: Any = ...
    loop: Any = ...
    def __init__(self, session: Any) -> None: ...
    def request(
        self,
        verb: Any,
        url: Any,
        payload: Optional[Any] = ...,
        multipart: Optional[Any] = ...,
    ): ...
    def handle_execution_response(self, response: Any, wait: Any): ...

class RequestsWebhookAdapter(WebhookAdapter):
    session: Any = ...
    sleep: Any = ...
    def __init__(self, session: Optional[Any] = ..., *, sleep: bool = ...) -> None: ...
    def request(
        self,
        verb: Any,
        url: Any,
        payload: Optional[Any] = ...,
        multipart: Optional[Any] = ...,
    ): ...
    def handle_execution_response(self, response: Any, wait: Any): ...

class Webhook:
    id: Any = ...
    channel_id: Any = ...
    guild_id: Any = ...
    name: Any = ...
    avatar: Any = ...
    token: Any = ...
    user: Any = ...
    def __init__(
        self, data: Any, adapter: Any, *, state: Optional[Any] = ...
    ) -> None: ...
    @property
    def url(self): ...
    @classmethod
    def partial(cls, id: Any, token: Any, adapter: Any): ...
    @classmethod
    def from_url(cls, url: Any, adapter: Any): ...
    @classmethod
    def from_state(cls, data: Any, state: Any): ...
    @property
    def guild(self): ...
    @property
    def channel(self): ...
    @property
    def created_at(self): ...
    @property
    def avatar_url(self): ...
    def avatar_url_as(self, *, format: Optional[Any] = ..., size: int = ...): ...
    def delete(self): ...
    def edit(self, **kwargs: Any): ...
    def send(
        self,
        content: Optional[Any] = ...,
        *,
        wait: bool = ...,
        username: Optional[Any] = ...,
        avatar_url: Optional[Any] = ...,
        tts: bool = ...,
        file: Optional[Any] = ...,
        embed: Optional[Any] = ...,
        embeds: Optional[Any] = ...
    ): ...
    def execute(self, *args: Any, **kwargs: Any): ...
