import ctypes
from logging import Logger
from .errors import DiscordException
from typing import Any, Type, List, Tuple, Dict

log: Logger
c_int_ptr: Type[ctypes.pointer[ctypes.c_int]]
c_int16_ptr: Type[ctypes.pointer[ctypes.c_int16]]
c_float_ptr: Type[ctypes.pointer[ctypes.c_float]]

class EncoderStruct(ctypes.Structure): ...

EncoderStructPtr: Type[ctypes.pointer[EncoderStruct]]
exported_functions: List[Tuple[Any]]
def libopus_loader(name: str) -> ctypes.CDLL: ...
def load_opus(name: str) -> None: ...
def is_loaded() -> bool: ...

class OpusError(DiscordException):
    code: int = ...
    def __init__(self, code: int) -> None: ...

class OpusNotLoaded(DiscordException): ...

OK: int = ...
APPLICATION_AUDIO: int = ...
APPLICATION_VOIP: int = ...
APPLICATION_LOWDELAY: int = ...
CTL_SET_BITRATE: int = ...
CTL_SET_BANDWIDTH: int = ...
CTL_SET_FEC: int = ...
CTL_SET_PLP: int = ...
CTL_SET_SIGNAL: int = ...
band_ctl: Dict[str, int] = ...
signal_ctl: Dict[str, int] = ...

class Encoder:
    SAMPLING_RATE: int = ...
    CHANNELS: int = ...
    FRAME_LENGTH: int = ...
    SAMPLE_SIZE: int = ...
    SAMPLES_PER_FRAME: int = ...
    FRAME_SIZE: int = ...
    application: int = ...
    def __init__(self, application: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def set_bitrate(self, kbps: int) -> int: ...
    def set_bandwidth(self, req: str) -> None: ...
    def set_signal_type(self, req: str) -> None: ...
    def set_fec(self, enabled: bool = ...) -> None: ...
    def set_expected_packet_loss_percent(self, percentage: float) -> None: ...
    def encode(self, pcm: bytes, frame_size: int) -> bytes: ...
