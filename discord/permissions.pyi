from typing import Any, Optional, TypeVar, Type, Iterator, Tuple

_T = TypeVar("_T")

class Permissions:
    value: int = ...
    def __init__(self, permissions: int = ...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterator[str, bool]: ...
    def is_subset(self, other: Permissions) -> bool: ...
    def is_superset(self, other: Permissions) -> bool: ...
    def is_strict_subset(self, other: Permissions) -> bool: ...
    def is_strict_superset(self, other: Permissions) -> bool: ...
    def __le__(self, other: Permissions) -> bool: ...
    def __ge__(self, other: Permissions) -> bool: ...
    def __lt__(self, other: Permissions) -> bool: ...
    def __gt__(self, other: Permissions) -> bool: ...
    @classmethod
    def none(cls) -> Permissions: ...
    @classmethod
    def all(cls) -> Permissions: ...
    @classmethod
    def all_channel(cls) -> Permissions: ...
    @classmethod
    def general(cls) -> Permissions: ...
    @classmethod
    def text(cls) -> Permissions: ...
    @classmethod
    def voice(cls) -> Permissions: ...
    def update(self, **kwargs: bool) -> None: ...
    def handle_overwrite(self, allow: int, deny: int) -> None: ...
    @property
    def create_instant_invite(self) -> bool: ...
    @create_instant_invite.setter
    def create_instant_invite(self, value: bool) -> None: ...
    @property
    def kick_members(self) -> bool: ...
    @kick_members.setter
    def kick_members(self, value: bool) -> None: ...
    @property
    def ban_members(self) -> bool: ...
    @ban_members.setter
    def ban_members(self, value: bool) -> None: ...
    @property
    def administrator(self) -> bool: ...
    @administrator.setter
    def administrator(self, value: bool) -> None: ...
    @property
    def manage_channels(self) -> bool: ...
    @manage_channels.setter
    def manage_channels(self, value: bool) -> None: ...
    @property
    def manage_guild(self) -> bool: ...
    @manage_guild.setter
    def manage_guild(self, value: bool) -> None: ...
    @property
    def add_reactions(self) -> bool: ...
    @add_reactions.setter
    def add_reactions(self, value: bool) -> None: ...
    @property
    def view_audit_log(self) -> bool: ...
    @view_audit_log.setter
    def view_audit_log(self, value: bool) -> None: ...
    @property
    def read_messages(self) -> bool: ...
    @read_messages.setter
    def read_messages(self, value: bool) -> None: ...
    @property
    def send_messages(self) -> bool: ...
    @send_messages.setter
    def send_messages(self, value: bool) -> None: ...
    @property
    def send_tts_messages(self) -> bool: ...
    @send_tts_messages.setter
    def send_tts_messages(self, value: bool) -> None: ...
    @property
    def manage_messages(self) -> bool: ...
    @manage_messages.setter
    def manage_messages(self, value: bool) -> None: ...
    @property
    def embed_links(self) -> bool: ...
    @embed_links.setter
    def embed_links(self, value: bool) -> None: ...
    @property
    def attach_files(self) -> bool: ...
    @attach_files.setter
    def attach_files(self, value: bool) -> None: ...
    @property
    def read_message_history(self) -> bool: ...
    @read_message_history.setter
    def read_message_history(self, value: bool) -> None: ...
    @property
    def mention_everyone(self) -> bool: ...
    @mention_everyone.setter
    def mention_everyone(self, value: bool) -> None: ...
    @property
    def external_emojis(self) -> bool: ...
    @external_emojis.setter
    def external_emojis(self, value: bool) -> None: ...
    @property
    def connect(self) -> bool: ...
    @connect.setter
    def connect(self, value: bool) -> None: ...
    @property
    def speak(self) -> bool: ...
    @speak.setter
    def speak(self, value: bool) -> None: ...
    @property
    def mute_members(self) -> bool: ...
    @mute_members.setter
    def mute_members(self, value: bool) -> None: ...
    @property
    def deafen_members(self) -> bool: ...
    @deafen_members.setter
    def deafen_members(self, value: bool) -> None: ...
    @property
    def move_members(self) -> bool: ...
    @move_members.setter
    def move_members(self, value: bool) -> None: ...
    @property
    def use_voice_activation(self) -> bool: ...
    @use_voice_activation.setter
    def use_voice_activation(self, value: bool) -> None: ...
    @property
    def change_nickname(self) -> bool: ...
    @change_nickname.setter
    def change_nickname(self, value: bool) -> None: ...
    @property
    def manage_nicknames(self) -> bool: ...
    @manage_nicknames.setter
    def manage_nicknames(self, value: bool) -> None: ...
    @property
    def manage_roles(self) -> bool: ...
    @manage_roles.setter
    def manage_roles(self, value: bool) -> None: ...
    @property
    def manage_webhooks(self) -> bool: ...
    @manage_webhooks.setter
    def manage_webhooks(self, value: bool) -> None: ...
    @property
    def manage_emojis(self) -> bool: ...
    @manage_emojis.setter
    def manage_emojis(self, value: bool) -> None: ...

def augment_from_permissions(cls: Type[_T]) -> Type[_T]: ...

class PermissionOverwrite:
    def __init__(self, **kwargs: Optional[bool]) -> None: ...
    def pair(self) -> Tuple[Permissions, Permissions]: ...
    @classmethod
    def from_pair(cls, allow: Permissions, deny: Permissions) -> PermissionOverwrite: ...
    def is_empty(self) -> bool: ...
    def update(self, **kwargs: Optional[bool]) -> None: ...
    def __iter__(self) -> Iterator[Tuple[str, Optional[bool]]]: ...
