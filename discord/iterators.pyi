# Stubs for discord.iterators (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .audit_logs import AuditLogEntry
from .errors import NoMoreItems
from .object import Object
from typing import Any, Optional

PY35: Any

class _AsyncIterator:
    def get(self, **attrs: Any): ...
    def find(self, predicate: Any): ...
    def map(self, func: Any): ...
    def filter(self, predicate: Any): ...
    def flatten(self): ...
    def __aiter__(self): ...
    def __anext__(self): ...

class _MappedAsyncIterator(_AsyncIterator):
    iterator: Any = ...
    func: Any = ...
    def __init__(self, iterator: Any, func: Any) -> None: ...
    def next(self): ...

class _FilteredAsyncIterator(_AsyncIterator):
    iterator: Any = ...
    predicate: Any = ...
    def __init__(self, iterator: Any, predicate: Any) -> None: ...
    def next(self): ...

class ReactionIterator(_AsyncIterator):
    message: Any = ...
    limit: Any = ...
    after: Any = ...
    getter: Any = ...
    state: Any = ...
    emoji: Any = ...
    guild: Any = ...
    channel_id: Any = ...
    users: Any = ...
    def __init__(
        self, message: Any, emoji: Any, limit: int = ..., after: Optional[Any] = ...
    ) -> None: ...
    def next(self): ...
    def fill_users(self) -> None: ...

class HistoryIterator(_AsyncIterator):
    messageable: Any = ...
    limit: Any = ...
    before: Any = ...
    after: Any = ...
    around: Any = ...
    reverse: Any = ...
    state: Any = ...
    logs_from: Any = ...
    messages: Any = ...
    def __init__(
        self,
        messageable: Any,
        limit: Any,
        before: Optional[Any] = ...,
        after: Optional[Any] = ...,
        around: Optional[Any] = ...,
        reverse: Optional[Any] = ...,
    ) -> None: ...
    def next(self): ...
    channel: Any = ...
    def flatten(self): ...
    def fill_messages(self) -> None: ...

class AuditLogIterator(_AsyncIterator):
    guild: Any = ...
    loop: Any = ...
    request: Any = ...
    limit: Any = ...
    before: Any = ...
    user_id: Any = ...
    action_type: Any = ...
    after: Any = ...
    reverse: Any = ...
    entries: Any = ...
    def __init__(
        self,
        guild: Any,
        limit: Optional[Any] = ...,
        before: Optional[Any] = ...,
        after: Optional[Any] = ...,
        reverse: Optional[Any] = ...,
        user_id: Optional[Any] = ...,
        action_type: Optional[Any] = ...,
    ) -> None: ...
    def next(self): ...
