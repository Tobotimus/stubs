import asyncio
import logging
from typing import Any, Optional, Union, List, Tuple, Dict
from .activity import Activity, Game, Streaming
from .client import Client
from .enums import Status
from .gateway import DiscordWebSocket
from .guild import Guild
from .state import AutoShardedConnectionState

_AnyActivity = Union[Activity, Game, Streaming]

log: logging.Logger = ...

class Shard:
    ws: DiscordWebSocket = ...
    loop: asyncio.BaseEventLoop = ...
    def __init__(self, ws: DiscordWebSocket, client: Client) -> None: ...
    @property
    def id(self) -> int: ...
    def is_pending(self) -> bool: ...
    def complete_pending_reads(self) -> None: ...
    def launch_pending_reads(self) -> None: ...
    def wait(self) -> asyncio.Task: ...
    async def poll(self) -> None: ...
    def get_future(self) -> Union[asyncio.Task, asyncio.Future]: ...

class AutoShardedClient(Client):
    shard_ids: Optional[List[int]] = ...
    shards: Dict[int, Shard] = ...
    def __init__(self, *args: Any, loop: Optional[asyncio.BaseEventLoop] = ..., **kwargs: Any) -> None: ...
    @property
    def latency(self) -> float: ...
    @property
    def latencies(self) -> List[Tuple[int, float]]: ...
    async def request_offline_members(self, *guilds: Guild) -> None: ...
    async def launch_shard(self, gateway: Any, shard_id: int) -> Optional[Shard]: ...
    async def launch_shards(self) -> None: ...
    async def close(self) -> None: ...
    async def change_presence(
        self,
        *,
        activity: Optional[_AnyActivity] = ...,
        status: Optional[Status] = ...,
        afk: bool = ...,
        shard_id: Optional[int],
    ) -> None: ...
