import datetime
from typing import Any, Optional, Union, Callable, Iterable, List, Dict
from .abc import Messageable, GuildChannel, Connectable, Snowflake
from .guild import Guild
from .member import Member
from .message import Message
from .mixins import Hashable
from .permissions import Permissions
from .state import ConnectionState
from .user import User, ClientUser
from .webhook import Webhook

_MessagePredicate = Callable[[Message], bool]
_Occurrence = Union[Message, datetime.datetime]

class TextChannel(Messageable, GuildChannel, Hashable):
    category_id: int = ...
    topic: Optional[str] = ...
    position: int = ...
    def __init__(self, state: ConnectionState, guild: Guild, data: Dict[str, Any]) -> None: ...
    @property
    def members(self) -> List[Member]: ...
    def is_nsfw(self) -> bool: ...
    async def edit(self, *, reason: Optional[str] = ..., **options: Any) -> None: ...
    async def delete_messages(self, messages: Iterable[Snowflake]): ...
    async def purge(
        self,
        *,
        limit: int = ...,
        check: Optional[_MessagePredicate] = ...,
        before: Optional[_Occurrence] = ...,
        after: Optional[_Occurrence] = ...,
        around: Optional[_Occurrence] = ...,
        reverse: bool = ...,
        bulk: bool = ...
    ) -> List[Message]: ...
    async def webhooks(self) -> List[Webhook]: ...
    async def create_webhook(
        self, *, name: Optional[str] = ..., avatar: Optional[bytes] = ...
    ) -> Webhook: ...

class VoiceChannel(Connectable, GuildChannel, Hashable):
    name: str = ...
    guild: Guild = ...
    id: int = ...
    category_id: int = ...
    position: int = ...
    bitrate: int = ...
    user_limit: int = ...
    def __init__(self, state: ConnectionState, guild: Guild, data: Dict[str, Any]) -> None: ...
    @property
    def members(self) -> List[Member]: ...
    async def edit(self, *, reason: Optional[str] = ..., **options: Any) -> None: ...

class CategoryChannel(GuildChannel, Hashable):
    name: str = ...
    guild: Guild = ...
    id: int = ...
    position: int = ...
    def __init__(self, state: ConnectionState, guild: Guild, data: Dict[str, Any]) -> None: ...
    def is_nsfw(self) -> bool: ...
    async def edit(self, *, reason: Optional[str] = ..., **options: Any) -> None: ...
    @property
    def channels(self) -> List[GuildChannel]: ...

class DMChannel(Messageable, Hashable):
    recipient: User = ...
    me: ClientUser = ...
    id: int = ...
    def __init__(self, me: ClientUser, state: ConnectionState, data: Dict[str, Any]) -> None: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def permissions_for(self, user: Optional[User] = ...) -> Permissions: ...

class GroupChannel(Messageable, Hashable):
    recipients: List[User] = ...
    me: ClientUser = ...
    id: int = ...
    owner: User = ...
    icon: Optional[str] = ...
    name: Optional[str] = ...
    def __init__(self, me: Any, state: Any, data: Any) -> None: ...
    @property
    def icon_url(self) -> str: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def permissions_for(self, user: User) -> Permissions: ...
    async def add_recipients(self, *recipients: User) -> None: ...
    async def remove_recipients(self, *recipients: User) -> None: ...
    async def edit(self, **fields: Any) -> None: ...
    async def leave(self) -> None: ...

# Names in __all__ with no definition:
#   _channel_factory
