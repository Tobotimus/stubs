# Stubs for discord.message (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import datetime
from io import RawIOBase
from . import abc
from .calls import CallMessage
from .channel import TextChannel
from .embeds import Embed
from .emoji import Emoji, PartialEmoji
from .enums import MessageType
from .guild import Guild
from .member import Member
from .reaction import Reaction
from .role import Role
from .state import ConnectionState
from .user import User
from typing import Any, Optional, Union, List, Dict

try:
    from mypy_extensions import TypedDict

    _ApplicationDict = TypedDict(
        "_ApplicationDict",
        {"id": str, "name": str, "description": str, "icon": str, "cover_image": str},
    )
    _ActivityDict = TypedDict("_ActivityDict", {"type": int, "party_id": int}, total=False)
except ImportError:
    _ApplicationDict = Dict[str, str]
    _ActivityDict = Dict[str, int]

_EmojiDescriptor = Union[Emoji, Reaction, PartialEmoji, str]

class Attachment:
    id: int = ...
    size: int = ...
    height: Optional[int] = ...
    width: Optional[int] = ...
    filename: str = ...
    url: str = ...
    proxy_url: str = ...
    def __init__(self, data: Dict[str, Any], state: ConnectionState) -> None: ...
    def save(self, fp: Union[RawIOBase, str], *, seek_begin: bool = ...) -> int: ...

class Message:
    tts: bool = ...
    type: MessageType = ...
    author: Union[Member, User] = ...
    content: str = ...
    nonce: Any = ...
    embeds: List[Embed] = ...
    channel: TextChannel = ...
    call: Optional[CallMessage] = ...
    mention_everyone: bool = ...
    mentions: List[Member] = ...
    role_mentions: List[Role] = ...
    id: int = ...
    webhook_id: Optional[int] = ...
    attachments: List[Attachment] = ...
    pinned: bool = ...
    reactions: List[Reaction] = ...
    activity: Optional[_ActivityDict] = ...
    application: Optional[_ApplicationDict] = ...
    def __init__(
        self, state: ConnectionState, channel: TextChannel, data: Dict[str, Any]
    ) -> None: ...
    @property
    def guild(self) -> Optional[Guild]: ...
    @property
    def raw_mentions(self) -> List[int]: ...
    @property
    def raw_channel_mentions(self) -> List[int]: ...
    @property
    def raw_role_mentions(self) -> List[int]: ...
    @property
    def channel_mentions(self) -> List[abc.GuildChannel]: ...
    @property
    def clean_content(self) -> str: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def edited_at(self) -> Optional[datetime.datetime]: ...
    @property
    def system_content(self) -> str: ...
    async def delete(self) -> None: ...
    async def edit(self, **fields: Optional[Any]) -> None: ...
    async def pin(self) -> None: ...
    async def unpin(self) -> None: ...
    async def add_reaction(self, emoji: _EmojiDescriptor) -> None: ...
    async def remove_reaction(self, emoji: _EmojiDescriptor, member: abc.Snowflake) -> None: ...
    async def clear_reactions(self) -> None: ...
    def ack(self) -> None: ...
