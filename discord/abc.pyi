# Stubs for discord.abc (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import datetime
from typing import Type, Any, Optional, Union, List, Tuple, TYPE_CHECKING
from .context_managers import Typing
from .errors import ClientException, InvalidArgument
from .file import File
from .invite import Invite
from .iterators import HistoryIterator
from .permissions import PermissionOverwrite, Permissions
from .role import Role
from .voice_client import VoiceClient
from collections import namedtuple

if TYPE_CHECKING:
    from .member import Member
    from .channel import CategoryChannel
    from .embeds import Embed
    from .message import Message

Overwriteable = Union[Role, "Member"]
Occurrence = Union["Message", datetime.datetime]

class _Undefined: ...

class Snowflake:
    id: int
    @property
    def created_at(self) -> datetime.datetime: ...
    @classmethod
    def __subclasshook__(cls, C: Type[Any]) -> Union[bool, NotImplemented]: ...

class User:
    @property
    def display_name(self) -> str: ...
    @property
    def mention(self) -> str: ...
    @classmethod
    def __subclasshook__(cls, C: Type[Any]) -> Union[bool, NotImplemented]: ...

class PrivateChannel:
    @classmethod
    def __subclasshook__(cls, C: Type[Any]) -> Union[bool, NotImplemented]: ...

_Overwrites = namedtuple("_Overwrites", "id allow deny type")

class GuildChannel:
    @property
    def changed_roles(self) -> List[Role]: ...
    @property
    def mention(self) -> str: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def overwrites_for(self, obj: Union[Role, User]) -> PermissionOverwrite: ...
    @property
    def overwrites(self) -> List[Tuple[Overwriteable, PermissionOverwrite]]: ...
    @property
    def category(self) -> Optional["CategoryChannel"]: ...
    def permissions_for(self, member: "Member") -> Permissions: ...
    def delete(self, *, reason: Optional[str] = ...) -> None: ...
    def set_permissions(
        self,
        target: Overwriteable,
        *,
        overwrite: PermissionOverwrite = ...,
        reason: Optional[str] = ...,
        **permissions: bool
    ) -> None: ...
    def create_invite(
        self,
        *,
        reason: Optional[str] = ...,
        max_age: int = ...,
        max_uses: int = ...,
        temporary: bool = ...,
        unique: bool = ...
    ) -> Invite: ...
    def invites(self) -> List[Invite]: ...

class Messageable:
    def send(
        self,
        content: Optional[str] = ...,
        *,
        tts: bool = ...,
        embed: Optional["Embed"] = ...,
        file: Optional[File] = ...,
        files: Optional[List[File]] = ...,
        delete_after: Optional[float] = ...,
        nonce: Optional[int] = ...
    ) -> "Message": ...
    def trigger_typing(self) -> None: ...
    def typing(self) -> Typing: ...
    def get_message(self, id: int) -> "Message": ...
    def pins(self) -> List["Message"]: ...
    def history(
        self,
        *,
        limit: int = ...,
        before: Optional[Occurrence] = ...,
        after: Optional[Occurrence] = ...,
        around: Optional[Occurrence] = ...,
        reverse: Optional[bool] = ...
    ) -> HistoryIterator: ...

class Connectable:
    def connect(
        self, *, timeout: float = ..., reconnect: bool = ...
    ) -> VoiceClient: ...
