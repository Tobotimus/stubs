# Stubs for discord.guild (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .channel import *
from .activity import create_activity
from .colour import Colour
from .enums import ChannelType, ContentFilter, Status, VerificationLevel, VoiceRegion, try_enum
from .errors import ClientException, InvalidArgument
from .invite import Invite
from .iterators import AuditLogIterator
from .member import Member, VoiceState
from .mixins import Hashable
from .permissions import PermissionOverwrite
from .role import Role
from .user import User
from .utils import valid_icon_size
from .webhook import Webhook
from collections import namedtuple
from typing import Any, Optional

VALID_ICON_FORMATS: Any

BanEntry = namedtuple('BanEntry', 'reason user')

class Guild(Hashable):
    def __init__(self, data: Any, state: Any) -> None: ...
    @property
    def channels(self): ...
    @property
    def large(self): ...
    @property
    def voice_channels(self): ...
    @property
    def me(self): ...
    @property
    def voice_client(self): ...
    @property
    def text_channels(self): ...
    @property
    def categories(self): ...
    def by_category(self): ...
    def get_channel(self, channel_id: Any): ...
    @property
    def system_channel(self): ...
    @property
    def members(self): ...
    def get_member(self, user_id: Any): ...
    def default_role(self): ...
    @property
    def owner(self): ...
    @property
    def icon_url(self): ...
    def icon_url_as(self, *, format: str = ..., size: int = ...): ...
    @property
    def splash_url(self): ...
    @property
    def member_count(self): ...
    @property
    def chunked(self): ...
    @property
    def shard_id(self): ...
    @property
    def created_at(self): ...
    @property
    def role_hierarchy(self): ...
    def get_member_named(self, name: Any): ...
    def create_text_channel(self, name: Any, *, overwrites: Optional[Any] = ..., category: Optional[Any] = ..., reason: Optional[Any] = ...): ...
    def create_voice_channel(self, name: Any, *, overwrites: Optional[Any] = ..., category: Optional[Any] = ..., reason: Optional[Any] = ...): ...
    def create_category(self, name: Any, *, overwrites: Optional[Any] = ..., reason: Optional[Any] = ...): ...
    create_category_channel: Any = ...
    def leave(self) -> None: ...
    def delete(self) -> None: ...
    def edit(self, *, reason: Optional[Any] = ..., **fields: Any) -> None: ...
    def get_ban(self, user: Any): ...
    def bans(self): ...
    def prune_members(self, days: Any, *, reason: Optional[Any] = ...): ...
    def webhooks(self): ...
    def estimate_pruned_members(self, days: Any): ...
    def invites(self): ...
    def create_custom_emoji(self, name: Any, image: Any, *, reason: Optional[Any] = ...): ...
    def create_role(self, *, reason: Optional[Any] = ..., **fields: Any): ...
    def kick(self, user: Any, *, reason: Optional[Any] = ...) -> None: ...
    def ban(self, user: Any, *, reason: Optional[Any] = ..., delete_message_days: int = ...) -> None: ...
    def unban(self, user: Any, *, reason: Optional[Any] = ...) -> None: ...
    def vanity_invite(self): ...
    def ack(self): ...
    def audit_logs(self, *, limit: int = ..., before: Optional[Any] = ..., after: Optional[Any] = ..., reverse: Optional[Any] = ..., user: Optional[Any] = ..., action: Optional[Any] = ...): ...
