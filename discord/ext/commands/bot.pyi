# Stubs for discord.ext.commands.bot (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import discord
from .context import Context
from .core import Command, GroupMixin
from .formatter import HelpFormatter
from .view import StringView
from typing import Any, Optional
def when_mentioned(bot: Any, msg: Any): ...
def when_mentioned_or(*prefixes: Any): ...

class BotBase(GroupMixin):
    command_prefix: Any = ...
    extra_events: Any = ...
    cogs: Any = ...
    extensions: Any = ...
    description: Any = ...
    pm_help: Any = ...
    owner_id: Any = ...
    command_not_found: Any = ...
    command_has_no_subcommands: Any = ...
    help_attrs: Any = ...
    formatter: Any = ...
    def __init__(
        self,
        command_prefix: Any,
        formatter: Optional[Any] = ...,
        description: Optional[Any] = ...,
        pm_help: bool = ...,
        **options: Any
    ) -> None: ...
    def dispatch(self, event_name: Any, *args: Any, **kwargs: Any) -> None: ...
    def close(self) -> None: ...
    def on_command_error(self, context: Any, exception: Any): ...
    def check(self, func: Any): ...
    def add_check(self, func: Any, *, call_once: bool = ...) -> None: ...
    def remove_check(self, func: Any) -> None: ...
    def check_once(self, func: Any): ...
    def can_run(self, ctx: Any, *, call_once: bool = ...): ...
    def is_owner(self, user: Any): ...
    def before_invoke(self, coro: Any): ...
    def after_invoke(self, coro: Any): ...
    def add_listener(self, func: Any, name: Optional[Any] = ...) -> None: ...
    def remove_listener(self, func: Any, name: Optional[Any] = ...) -> None: ...
    def listen(self, name: Optional[Any] = ...): ...
    def add_cog(self, cog: Any) -> None: ...
    def get_cog(self, name: str): ...
    def get_cog_commands(self, name: str): ...
    def remove_cog(self, name: str): ...
    def load_extension(self, name: str): ...
    def unload_extension(self, name: str): ...
    def get_prefix(self, message: Any): ...
    def get_context(self, message: Any, *, cls: Any = ...): ...
    def invoke(self, ctx: Any) -> None: ...
    def process_commands(self, message: Any) -> None: ...
    def on_message(self, message: Any) -> None: ...

class Bot(BotBase, discord.Client): ...
class AutoShardedBot(BotBase, discord.AutoShardedClient): ...
