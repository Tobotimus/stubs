import logging
import asyncio
from typing import Any, Optional, Union, Callable, Awaitable, Iterator, List, NamedTuple, TypeVar
from . import abc
from .activity import Activity, Game, Streaming
from .emoji import Emoji
from .enums import Status, VoiceRegion
from .gateway import DiscordWebSocket
from .guild import Guild
from .http import HTTPClient
from .invite import Invite
from .member import Member
from .object import Object
from .user import Profile, User, ClientUser
from .voice_client import VoiceClient
from .webhook import Webhook

_T = TypeVar("_T")
_AnyActivity = Union[Activity, Game, Streaming]
_AnyChannel = Union[abc.GuildChannel, abc.PrivateChannel]
_AnyInvite = Union[Invite, Object, str]
_EventPredicate = Callable[..., bool]
_AsyncFunction = Callable[..., Awaitable[Any]]

PY35: bool
log: logging.Logger

AppInfo = NamedTuple(
    "AppInfo",
    [
        ("id", int),
        ("name", str),
        ("description", str),
        ("icon", str),
        ("icon_url", str),
        ("owner", User),
    ],
)
def app_info_icon_url(self: AppInfo) -> str: ...

class Client:
    ws: DiscordWebSocket = ...
    loop: asyncio.BaseEventLoop = ...
    shard_id: Optional[int] = ...
    shard_count: Optional[int] = ...
    http: HTTPClient = ...
    def __init__(self, *, loop: Optional[asyncio.BaseEventLoop] = ..., **options: Any) -> None: ...
    def handle_ready(self) -> None: ...
    @property
    def latency(self) -> float: ...
    @property
    def user(self) -> Optional[ClientUser]: ...
    @property
    def guilds(self) -> List[Guild]: ...
    @property
    def emojis(self) -> List[Emoji]: ...
    @property
    def private_channels(self) -> abc.PrivateChannel: ...
    @property
    def voice_clients(self) -> List[VoiceClient]: ...
    def is_ready(self) -> bool: ...
    def dispatch(self, event: str, *args: Any, **kwargs: Any) -> None: ...
    async def on_error(self, event_method: str, *args: Any, **kwargs: Any) -> None: ...
    async def request_offline_members(self, *guilds: Guild) -> None: ...
    async def login(self, token: str, *, bot: bool = ...) -> None: ...
    async def logout(self) -> None: ...
    async def connect(self, *, reconnect: bool = ...) -> None: ...
    async def close(self) -> None: ...
    def clear(self) -> None: ...
    async def start(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, *args: Any, **kwargs: Any): ...
    def is_closed(self) -> bool: ...
    @property
    def activity(self) -> Optional[_AnyActivity]: ...
    @activity.setter
    def activity(self, value: _AnyActivity) -> None: ...
    @property
    def users(self) -> List[User]: ...
    def get_channel(self, id: int) -> Optional[_AnyChannel]: ...
    def get_guild(self, id: int) -> Optional[Guild]: ...
    def get_user(self, id: int) -> Optional[User]: ...
    def get_emoji(self, id: int) -> Optional[Emoji]: ...
    def get_all_channels(self) -> Iterator[abc.GuildChannel]: ...
    def get_all_members(self) -> Iterator[Member]: ...
    async def wait_until_ready(self) -> None: ...
    async def wait_for(
        self, event: Any, *, check: Optional[_EventPredicate] = ..., timeout: Optional[float] = ...
    ): ...
    def event(self, coro: _AsyncFunction): ...
    def async_event(self, coro: Union[Callable[..., Any], _AsyncFunction]): ...
    async def change_presence(
        self,
        *,
        activity: Optional[_AnyActivity] = ...,
        status: Optional[Status] = ...,
        afk: bool = ...
    ) -> None: ...
    async def create_guild(
        self, name: str, region: Optional[VoiceRegion] = ..., icon: Optional[bytes] = ...
    ): ...
    async def get_invite(self, url: str) -> Invite: ...
    async def delete_invite(self, invite: _AnyInvite) -> None: ...
    async def application_info(self) -> AppInfo: ...
    async def get_user_info(self, user_id: int) -> User: ...
    async def get_user_profile(self, user_id: int) -> Profile: ...
    async def get_webhook_info(self, webhook_id: int) -> Webhook: ...
