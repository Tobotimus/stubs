from typing import Any, Optional, Callable, Dict, Tuple, Iterator, ItemsView
from . import abc
from .enums import AuditLogAction
from .guild import Guild

# TODO: Update from documentation

_TransformerCallable = Callable[["AuditLogEntry", Any], Any]
_TransformerSpec = Tuple[Optional[str], Optional[_TransformerCallable]]

try:
    from mypy_extensions import TypedDict
except ImportError:
    _TransformersDict = Dict[str, _TransformerSpec]
else:
    _TransformersDict = TypedDict[
        "TransfomersDict",
        {
            "verification_level": _TransformerSpec,
            "explicit_content_filter": _TransformerSpec,
            "allow": _TransformerSpec,
            "deny": _TransformerSpec,
            "permissions": _TransformerSpec,
            "id": _TransformerSpec,
            "color": _TransformerSpec,
            "owner_id": _TransformerSpec,
            "inviter_id": _TransformerSpec,
            "channel_id": _TransformerSpec,
            "afk_channel_id": _TransformerSpec,
            "system_channel_id": _TransformerSpec,
            "widget_channel_id": _TransformerSpec,
            "permission_overwrites": _TransformerSpec,
            "splash_hash": _TransformerSpec,
            "icon_hash": _TransformerSpec,
            "avatar_hash": _TransformerSpec,
        },
    ]

class AuditLogDiff:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[ItemsView[str, Any]]: ...

class AuditLogChanges:
    TRANSFORMERS: _TransformersDict = ...
    before: AuditLogDiff = ...
    after: AuditLogDiff = ...
    def __init__(self, entry: "AuditLogEntry", data: Any) -> None: ...

class AuditLogEntry:
    action: AuditLogAction = ...
    user: "abc.User" = ...
    id: int = ...
    target: Any = ...
    reason: Optional[str] = ...
    extra: Optional[Any] = ...
    guild: "Guild" = ...
    def __init__(self, users: Any, data: Any, guild: "Guild") -> None: ...
    def created_at(self): ...
    def target(self): ...
    def category(self): ...
    def changes(self): ...
    def before(self): ...
    def after(self): ...
