# Stubs for discord.http (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .errors import Forbidden, GatewayNotFound, HTTPException, LoginFailure, NotFound
from typing import Any, Optional

log: Any

def json_or_text(response: Any): ...

class Route:
    BASE: str = ...
    path: Any = ...
    method: Any = ...
    url: Any = ...
    channel_id: Any = ...
    guild_id: Any = ...
    def __init__(self, method: Any, path: Any, **parameters: Any) -> None: ...
    @property
    def bucket(self): ...

class MaybeUnlock:
    lock: Any = ...
    def __init__(self, lock: Any) -> None: ...
    def __enter__(self): ...
    def defer(self) -> None: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class HTTPClient:
    SUCCESS_LOG: str = ...
    REQUEST_LOG: str = ...
    loop: Any = ...
    connector: Any = ...
    token: Any = ...
    bot_token: bool = ...
    proxy: Any = ...
    proxy_auth: Any = ...
    user_agent: Any = ...
    def __init__(self, connector: Optional[Any] = ..., *, proxy: Optional[Any] = ..., proxy_auth: Optional[Any] = ..., loop: Optional[Any] = ...) -> None: ...
    def recreate(self) -> None: ...
    def request(self, route: Any, *, header_bypass_delay: Optional[Any] = ..., **kwargs: Any): ...
    def get_attachment(self, url: Any): ...
    def close(self) -> None: ...
    def static_login(self, token: Any, bot: Any): ...
    def logout(self): ...
    def start_group(self, user_id: Any, recipients: Any): ...
    def leave_group(self, channel_id: Any): ...
    def add_group_recipient(self, channel_id: Any, user_id: Any): ...
    def remove_group_recipient(self, channel_id: Any, user_id: Any): ...
    def edit_group(self, channel_id: Any, **options: Any): ...
    def convert_group(self, channel_id: Any): ...
    def start_private_message(self, user_id: Any): ...
    def send_message(self, channel_id: Any, content: Any, *, tts: bool = ..., embed: Optional[Any] = ..., nonce: Optional[Any] = ...): ...
    def send_typing(self, channel_id: Any): ...
    def send_files(self, channel_id: Any, files: Any, *, content: Optional[Any] = ..., tts: bool = ..., embed: Optional[Any] = ..., nonce: Optional[Any] = ...): ...
    def ack_message(self, channel_id: Any, message_id: Any) -> None: ...
    def ack_guild(self, guild_id: Any): ...
    def delete_message(self, channel_id: Any, message_id: Any, *, reason: Optional[Any] = ...): ...
    def delete_messages(self, channel_id: Any, message_ids: Any, *, reason: Optional[Any] = ...): ...
    def edit_message(self, message_id: Any, channel_id: Any, **fields: Any): ...
    def add_reaction(self, message_id: Any, channel_id: Any, emoji: Any): ...
    def remove_reaction(self, message_id: Any, channel_id: Any, emoji: Any, member_id: Any): ...
    def remove_own_reaction(self, message_id: Any, channel_id: Any, emoji: Any): ...
    def get_reaction_users(self, message_id: Any, channel_id: Any, emoji: Any, limit: Any, after: Optional[Any] = ...): ...
    def clear_reactions(self, message_id: Any, channel_id: Any): ...
    def get_message(self, channel_id: Any, message_id: Any): ...
    def logs_from(self, channel_id: Any, limit: Any, before: Optional[Any] = ..., after: Optional[Any] = ..., around: Optional[Any] = ...): ...
    def pin_message(self, channel_id: Any, message_id: Any): ...
    def unpin_message(self, channel_id: Any, message_id: Any): ...
    def pins_from(self, channel_id: Any): ...
    def kick(self, user_id: Any, guild_id: Any, reason: Optional[Any] = ...): ...
    def ban(self, user_id: Any, guild_id: Any, delete_message_days: int = ..., reason: Optional[Any] = ...): ...
    def unban(self, user_id: Any, guild_id: Any, *, reason: Optional[Any] = ...): ...
    def guild_voice_state(self, user_id: Any, guild_id: Any, *, mute: Optional[Any] = ..., deafen: Optional[Any] = ..., reason: Optional[Any] = ...): ...
    def edit_profile(self, password: Any, username: Any, avatar: Any, **fields: Any): ...
    def change_my_nickname(self, guild_id: Any, nickname: Any, *, reason: Optional[Any] = ...): ...
    def change_nickname(self, guild_id: Any, user_id: Any, nickname: Any, *, reason: Optional[Any] = ...): ...
    def edit_member(self, guild_id: Any, user_id: Any, *, reason: Optional[Any] = ..., **fields: Any): ...
    def edit_channel(self, channel_id: Any, *, reason: Optional[Any] = ..., **options: Any): ...
    def bulk_channel_update(self, guild_id: Any, data: Any, *, reason: Optional[Any] = ...): ...
    def create_channel(self, guild_id: Any, name: Any, channel_type: Any, parent_id: Optional[Any] = ..., permission_overwrites: Optional[Any] = ..., *, reason: Optional[Any] = ...): ...
    def delete_channel(self, channel_id: Any, *, reason: Optional[Any] = ...): ...
    def create_webhook(self, channel_id: Any, *, name: Optional[Any] = ..., avatar: Optional[Any] = ...): ...
    def channel_webhooks(self, channel_id: Any): ...
    def guild_webhooks(self, guild_id: Any): ...
    def get_webhook(self, webhook_id: Any): ...
    def leave_guild(self, guild_id: Any): ...
    def delete_guild(self, guild_id: Any): ...
    def create_guild(self, name: Any, region: Any, icon: Any): ...
    def edit_guild(self, guild_id: Any, *, reason: Optional[Any] = ..., **fields: Any): ...
    def get_bans(self, guild_id: Any): ...
    def get_ban(self, user_id: Any, guild_id: Any): ...
    def get_vanity_code(self, guild_id: Any): ...
    def change_vanity_code(self, guild_id: Any, code: Any, *, reason: Optional[Any] = ...): ...
    def prune_members(self, guild_id: Any, days: Any, *, reason: Optional[Any] = ...): ...
    def estimate_pruned_members(self, guild_id: Any, days: Any): ...
    def create_custom_emoji(self, guild_id: Any, name: Any, image: Any, *, reason: Optional[Any] = ...): ...
    def delete_custom_emoji(self, guild_id: Any, emoji_id: Any, *, reason: Optional[Any] = ...): ...
    def edit_custom_emoji(self, guild_id: Any, emoji_id: Any, name: Any, *, reason: Optional[Any] = ...): ...
    def get_audit_logs(self, guild_id: Any, limit: int = ..., before: Optional[Any] = ..., after: Optional[Any] = ..., user_id: Optional[Any] = ..., action_type: Optional[Any] = ...): ...
    def create_invite(self, channel_id: Any, *, reason: Optional[Any] = ..., **options: Any): ...
    def get_invite(self, invite_id: Any): ...
    def invites_from(self, guild_id: Any): ...
    def invites_from_channel(self, channel_id: Any): ...
    def delete_invite(self, invite_id: Any, *, reason: Optional[Any] = ...): ...
    def edit_role(self, guild_id: Any, role_id: Any, *, reason: Optional[Any] = ..., **fields: Any): ...
    def delete_role(self, guild_id: Any, role_id: Any, *, reason: Optional[Any] = ...): ...
    def replace_roles(self, user_id: Any, guild_id: Any, role_ids: Any, *, reason: Optional[Any] = ...): ...
    def create_role(self, guild_id: Any, *, reason: Optional[Any] = ..., **fields: Any): ...
    def move_role_position(self, guild_id: Any, positions: Any, *, reason: Optional[Any] = ...): ...
    def add_role(self, guild_id: Any, user_id: Any, role_id: Any, *, reason: Optional[Any] = ...): ...
    def remove_role(self, guild_id: Any, user_id: Any, role_id: Any, *, reason: Optional[Any] = ...): ...
    def edit_channel_permissions(self, channel_id: Any, target: Any, allow: Any, deny: Any, type: Any, *, reason: Optional[Any] = ...): ...
    def delete_channel_permissions(self, channel_id: Any, target: Any, *, reason: Optional[Any] = ...): ...
    def move_member(self, user_id: Any, guild_id: Any, channel_id: Any, *, reason: Optional[Any] = ...): ...
    def remove_relationship(self, user_id: Any): ...
    def add_relationship(self, user_id: Any, type: Optional[Any] = ...): ...
    def send_friend_request(self, username: Any, discriminator: Any): ...
    def application_info(self): ...
    def get_gateway(self, *, encoding: str = ..., v: int = ..., zlib: bool = ...): ...
    def get_bot_gateway(self, *, encoding: str = ..., v: int = ..., zlib: bool = ...): ...
    def get_user_info(self, user_id: Any): ...
    def get_user_profile(self, user_id: Any): ...
